name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  DOCKER_IMAGE: tinywebserver
  DOCKER_TAG: latest

jobs:
  # 构建和测试阶段
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: webserver123
          MYSQL_DATABASE: webserver
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache CMake dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/vcpkg
          build/
        key: ${{ runner.os }}-cmake-${{ hashFiles('CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-cmake-

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          pkg-config \
          libmysqlclient-dev \
          libssl-dev \
          libgtest-dev \
          netcat-openbsd

    - name: Build project
      run: |
        rm -rf build
        mkdir -p build
        cd build
        cmake ..
        make server -j$(nproc)

    - name: Build tests
      run: |
        cd build
        make tests -j$(nproc)

    - name: Wait for MySQL
      run: |
        while ! mysqladmin ping -h"127.0.0.1" -P"3306" -u"root" -p"webserver123" --silent; do
          echo "Waiting for MySQL..."
          sleep 1
        done

    - name: Setup test database
      run: |
        mysql -h 127.0.0.1 -P 3306 -u root -pwebserver123 webserver < database_migration_final.sql

    - name: Run tests
      run: |
        cd build
        ./tests
      env:
        DB_HOST: 127.0.0.1
        DB_USER: root
        DB_PASSWORD: webserver123
        DB_NAME: webserver

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          build/server
          build/tests
        retention-days: 1

  # Docker 构建和发布阶段
  docker-build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'release'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Login to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  # 部署阶段 (仅在发布时)
  deploy:
    needs: [build-and-test, docker-build-and-push]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "This is where you would deploy to your production environment"
        echo "For example, update your docker-compose.yml on your server"
        echo "Release tag: ${{ github.event.release.tag_name }}"

    - name: Create deployment status
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: context.payload.deployment.id,
            state: 'success',
            environment_url: 'https://your-domain.com',
            description: 'Deployment completed successfully'
          });

  # 代码质量检查
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install cppcheck
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck

    - name: Run static analysis
      run: |
        cppcheck --enable=all --error-exitcode=1 \
          --suppress=missingIncludeSystem \
          --suppress=unmatchedSuppression \
          --inline-suppr \
          --std=c++11 \
          *.cpp *.h \
          http/*.cpp http/*.h \
          log/*.cpp log/*.h \
          CGImysql/*.cpp CGImysql/*.h \
          blog/*.cpp blog/*.h \
          timer/*.cpp timer/*.h

    - name: Check code formatting (optional)
      run: |
        if command -v clang-format >/dev/null; then
          echo "Running clang-format check..."
          find . -name "*.cpp" -o -name "*.h" | xargs clang-format --dry-run --Werror
        else
          echo "clang-format not available, skipping formatting check"
        fi