# =============================================================================
# CI Pipeline - 持续集成流水线
# =============================================================================
# 专注于自动化测试的 CI 流水线，包括构建、测试和代码质量检查

name: CI Pipeline

# =============================================================================
# 触发条件
# =============================================================================
on:
  # 推送到任意分支时触发
  push:
    branches: [ "*" ]
  
  # Pull Request 到主要分支时触发
  pull_request:
    branches: [ main, develop, blog ]

# =============================================================================
# 作业定义
# =============================================================================
jobs:
  # ---------------------------------------------------------------------------
  # 作业1: 构建和测试
  # ---------------------------------------------------------------------------
  build-and-test:
    runs-on: ubuntu-latest
    
    # MySQL 服务容器
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: webserver123
          MYSQL_DATABASE: webserver
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    # 检出代码
    - name: Checkout code
      uses: actions/checkout@v4

    # 缓存依赖
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/ccache
          /var/cache/apt/archives
        key: ${{ runner.os }}-deps-${{ hashFiles('**/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-deps-

    # 安装依赖
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          pkg-config \
          libmysqlclient-dev \
          libssl-dev \
          libgtest-dev \
          ccache

    # 配置编译缓存
    - name: Setup ccache
      run: |
        export CCACHE_DIR=~/.cache/ccache
        export CC="ccache gcc"
        export CXX="ccache g++"
        ccache --set-config=max_size=1G
        ccache --zero-stats

    # 构建项目
    - name: Build project
      run: |
        rm -rf build-ci
        mkdir -p build-ci
        cd build-ci
        export CC="ccache gcc"
        export CXX="ccache g++"
        cmake .. -DCMAKE_BUILD_TYPE=Release \
                 -DCMAKE_C_COMPILER_LAUNCHER=ccache \
                 -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
        make server -j$(nproc)

    # 构建测试
    - name: Build tests
      run: |
        cd build-ci
        make tests -j$(nproc)

    # 等待 MySQL 启动
    - name: Wait for MySQL
      run: |
        while ! mysqladmin ping -h"127.0.0.1" -P"3306" -u"root" -p"webserver123" --silent; do
          echo "Waiting for MySQL..."
          sleep 1
        done

    # 设置测试数据库
    - name: Setup test database
      run: |
        # 检查SQL文件是否存在
        if [ -f "database_migration_final.sql" ]; then
          mysql -h 127.0.0.1 -P 3306 -u root -pwebserver123 webserver < database_migration_final.sql
        elif [ -f "vblog.sql" ]; then
          mysql -h 127.0.0.1 -P 3306 -u root -pwebserver123 webserver < vblog.sql
        else
          echo "No SQL file found, creating minimal schema..."
          mysql -h 127.0.0.1 -P 3306 -u root -pwebserver123 webserver -e "
            CREATE TABLE IF NOT EXISTS user (
              username VARCHAR(100) NOT NULL,
              passwd VARCHAR(100) NOT NULL,
              PRIMARY KEY (username)
            ) ENGINE=InnoDB;
          "
        fi

    # 运行测试
    - name: Run tests
      run: |
        cd build-ci
        ./tests
      env:
        DB_HOST: 127.0.0.1
        DB_USER: root
        DB_PASSWORD: webserver123
        DB_NAME: webserver

    # 显示编译缓存统计
    - name: Show ccache stats
      run: ccache --show-stats

    # 上传测试报告（如果失败）
    - name: Upload test logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-logs-${{ github.run_number }}
        path: |
          build-ci/
          *.log
        retention-days: 7

  # ---------------------------------------------------------------------------
  # 作业2: 代码质量检查
  # ---------------------------------------------------------------------------
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # 安装静态分析工具
    - name: Install analysis tools
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck clang-tidy

    # 运行静态分析
    - name: Run static analysis
      run: |
        echo "Running cppcheck..."
        cppcheck --enable=warning,style,performance --error-exitcode=0 \
          --suppress=missingIncludeSystem \
          --suppress=unmatchedSuppression \
          --suppress=unusedFunction \
          --suppress=unusedPrivateFunction \
          --std=c++11 --language=c++ \
          --xml --xml-version=2 \
          *.cpp *.h \
          http/*.cpp http/*.h \
          log/*.cpp log/*.h \
          CGImysql/*.cpp CGImysql/*.h \
          timer/*.cpp timer/*.h \
          blog/*.cpp blog/*.h \
          2> cppcheck-report.xml || true

    # 检查编码规范
    - name: Check code style
      run: |
        echo "Checking for common code style issues..."
        # 检查制表符
        if grep -r $'\t' --include="*.cpp" --include="*.h" . ; then
          echo "Warning: Found tabs in source files"
        fi
        # 检查行尾空格
        if grep -r ' $' --include="*.cpp" --include="*.h" . ; then
          echo "Warning: Found trailing spaces"
        fi
        echo "Code style check completed"

    # 上传分析报告
    - name: Upload analysis reports
      uses: actions/upload-artifact@v4
      with:
        name: code-quality-reports-${{ github.run_number }}
        path: |
          cppcheck-report.xml
        retention-days: 30

  # ---------------------------------------------------------------------------
  # 作业3: 构建验证（不同编译器/配置）
  # ---------------------------------------------------------------------------
  build-matrix:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [gcc, clang]
        build_type: [Debug, Release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          pkg-config \
          libmysqlclient-dev \
          libssl-dev \
          clang

    - name: Build with ${{ matrix.compiler }} (${{ matrix.build_type }})
      run: |
        rm -rf build-${{ matrix.compiler }}-${{ matrix.build_type }}
        mkdir -p build-${{ matrix.compiler }}-${{ matrix.build_type }}
        cd build-${{ matrix.compiler }}-${{ matrix.build_type }}
        
        if [ "${{ matrix.compiler }}" = "clang" ]; then
          export CC=clang
          export CXX=clang++
        else
          export CC=gcc
          export CXX=g++
        fi
        
        cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        make server -j$(nproc)

  # ---------------------------------------------------------------------------
  # 作业4: 结果汇总
  # ---------------------------------------------------------------------------
  ci-summary:
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality, build-matrix]
    if: always()
    
    steps:
    - name: CI Summary
      run: |
        echo "=== CI Pipeline Summary ==="
        echo "Build and Test: ${{ needs.build-and-test.result }}"
        echo "Code Quality: ${{ needs.code-quality.result }}"
        echo "Build Matrix: ${{ needs.build-matrix.result }}"
        
        if [ "${{ needs.build-and-test.result }}" = "success" ] && \
           [ "${{ needs.code-quality.result }}" = "success" ] && \
           [ "${{ needs.build-matrix.result }}" = "success" ]; then
          echo "✅ All CI checks passed!"
          exit 0
        else
          echo "❌ Some CI checks failed!"
          exit 1
        fi